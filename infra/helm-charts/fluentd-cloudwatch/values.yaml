image:
  repository: fluent/fluentd-kubernetes-daemonset
  tag: v1.2-debian-cloudwatch
## Specify an imagePullPolicy (Required)
## It's recommended to change this to 'Always' if the image tag is 'latest'
## ref: http://kubernetes.io/docs/user-guide/images/#updating-images
  pullPolicy: IfNotPresent

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 100m
    memory: 500Mi
  requests:
    cpu: 100m
    memory: 500Mi

# hostNetwork: false

## Add tolerations if specified
tolerations: []
#   - key: node-role.kubernetes.io/master
#     operator: Exists
#     effect: NoSchedule

annotations: {}

awsRegion: us-east-1
awsRole:
logGroupName: kubernetes

rbac:
  ## If true, create and use RBAC resources
  create: true

  ## Ignored if rbac.create is true
  serviceAccountName: default
# Add extra environment variables if specified (must be specified as a single line object and be quoted)
extraVars: []
# - "{ name: NODE_NAME, valueFrom: { fieldRef: { fieldPath: spec.nodeName } } }"

fluentdConfig: |
  <match fluent.**>
    type null
  </match>

  <source>
    type tail
    enable_stat_watcher false
    path /var/log/containers/*.log
    pos_file /var/log/fluentd-containers.log.pos
    time_format %Y-%m-%dT%H:%M:%S.%NZ
    tag kubernetes.*
    format json
    read_from_head true
  </source>

  <filter kubernetes.**>
    type kubernetes_metadata
  </filter>

  <filter kubernetes.**>
      @type record_transformer
      enable_ruby true
      <record>
        pod_name ${record.fetch("kubernetes", Hash.new).fetch("pod_name", "unknown_pod")}
        container_name /aws/eks/ingest/${record.fetch("kubernetes", Hash.new).fetch("namespace_labels", Hash.new).fetch("name", "default")}/${record.fetch("kubernetes", Hash.new).fetch("container_name", "unknown_container")}
      </record>
    </filter>

  <match **>
    type cloudwatch_logs
    log_group_name_key container_name
    log_stream_name_key pod_name
    auto_create_stream true
    put_log_events_retry_limit 20
  </match>
